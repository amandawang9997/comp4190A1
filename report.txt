f0: arc consistency without heuristic

f1: arc consistency with most-constrined heuristic

f2: arc consistency with most-constraining heuristic

f3: arc consistency with hybrid heuristic

b0: arc consistency without heuristic

b1: backtracking with most-constrined heuristic

b2: backtracking with most-constraining heuristic

b3: backtracking with hybrid heuristic

The following table shows average nodes visited when the puzzle's size is changing
            f0      f1      f2      f3      b0      b1      b2      b3
6*6         2.67    2.67    2.33    2.33    27.33   27.33   32.33   32.33

8*8         2.67    2.67    2.33    2.33    55.33   52.33   63.33   63.33

10*10       2.67    2.67    3       3       83.33   83.33   198     198


The following table shows average nodes visited when the number of walls is changing

            f0      f1      f2      f3      b0      b1      b2      b3
12          8       8       7       7       TIMEOUT TIMEOUT TIMEOUT TIMEOUT

24          8       8       6       6       1154    1154    TIMEOUT TIMEOUT

48          2       2       3       3       99      99      2452    2452


During the experiment, we observed that in general, the arc consistency algorithm performs
significantly better than the backtracking algorithm. It is also quite surprising that the
number of nodes visited remains almost the same when the arc consistency algorithm is used.
On the contrary, the number increases exponentially when the backtracking algorithm is used.
Additionally, the most constrained heuristic is the most efficient one. When puzzle's dimen
-sion is fixed, if we have more walls (constraints), then the number of nodes visited will be
reduced. Averagely, the arc consistency algorithm visits 2059% less nodes.
